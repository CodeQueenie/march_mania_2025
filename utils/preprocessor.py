import pandas as pd
from sklearn.preprocessing import StandardScaler
from utils.logger import logger

class DataPreprocessor:
    """
    Data preprocessing utilities for March Madness predictions.
    Includes methods to calculate team stats, encode tournament seeds,
    and create matchup-specific features.
    """

    def __init__(self):
        try:
            self.scaler = StandardScaler()
            logger.info("DataPreprocessor initialized with StandardScaler.")
        except Exception as e:
            logger.error(f"Error during DataPreprocessor initialization: {e}")

    def calculate_team_stats(self, games_df, team_id):
        """
        Calculate aggregated team statistics based on game results.

        Args:
            games_df (pd.DataFrame): DataFrame with game results.
            team_id (int): Team identifier.

        Returns:
            pd.DataFrame: Aggregated team stats.
        """
        try:
            team_games = games_df[games_df["TeamID"] == team_id]
            stats = {
                "games": len(team_games),
                "win_pct": team_games["WinFlag"].mean(),
                "avg_points_scored": team_games["PointsScored"].mean(),
                "avg_points_allowed": team_games["PointsAllowed"].mean()
            }
            logger.info(f"Team stats calculated for TeamID {team_id}.")
            return pd.DataFrame([stats])
        except Exception as e:
            error_message = f"Error calculating team stats for TeamID {team_id}: {e}"
            logger.error(error_message)
            return pd.DataFrame()

    def encode_seeds(self, seeds_df):
        """
        Encode tournament seed information into numerical categories.

        Args:
            seeds_df (pd.DataFrame): DataFrame with seed information.

        Returns:
            pd.DataFrame: DataFrame with encoded seeds.
        """
        try:
            seeds_df["encoded_seed"] = seeds_df["Seed"].str.extract("(\d+)").astype(int)
            logger.info("Tournament seeds encoded successfully.")
            return seeds_df
        except Exception as e:
            error_message = f"Error encoding seeds: {e}"
            logger.error(error_message)
            return seeds_df

    def create_matchup_features(self, team1_season_stats, team2_season_stats):
        """
        Create matchup-specific features by comparing season statistics for two teams.

        Args:
            team1_season_stats (pd.DataFrame): Season stats for team 1.
            team2_season_stats (pd.DataFrame): Season stats for team 2.

        Returns:
            pd.DataFrame: DataFrame with matchup features.
        """
        try:
            matchup_features = {}
            for col in ["win_pct", "avg_points_scored", "avg_points_allowed"]:
                matchup_features[f"{col}_diff"] = team1_season_stats[col].iloc[0] - team2_season_stats[col].iloc[0]
            logger.info("Matchup features created successfully.")
            return pd.DataFrame([matchup_features])
        except Exception as e:
            error_message = f"Error creating matchup features: {e}"
            logger.error(error_message)
            return pd.DataFrame()

# Generated by Nicole LeGuern