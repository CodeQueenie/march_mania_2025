
import unittest
import pandas as pd
import os
import shutil
from utils.data_loader import DataLoader

# Generated by Nicole LeGuern
class TestDataLoader(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_data_dir = "test_data"
        cls.test_cache_dir = "test_cache"
        os.makedirs(cls.test_data_dir, exist_ok=True)
        
        # Create sample test data
        pd.DataFrame({
            'Season': [2015, 2015],
            'WTeamID': [1, 2],
            'LTeamID': [3, 4]
        }).to_csv(os.path.join(cls.test_data_dir, "MRegularSeasonCompactResults.csv"), index=False)

    def setUp(self):
        self.data_loader = DataLoader(self.test_data_dir, self.test_cache_dir)

    def test_data_loading(self):
        df = self.data_loader.load_regular_season()
        self.assertIsNotNone(df)
        self.assertEqual(len(df), 2)

    def test_caching(self):
        # Load data first time
        self.data_loader.load_regular_season()
        
        # Check if cache file exists
        cache_files = os.listdir(self.test_cache_dir)
        self.assertTrue(any('regular_season' in f for f in cache_files))

    def test_cache_validation(self):
        # Test invalid cache
        with open(os.path.join(self.test_cache_dir, "invalid_cache.pkl"), "w") as f:
            f.write("invalid data")
        
        self.assertFalse(self.data_loader._is_cache_valid(
            os.path.join(self.test_cache_dir, "invalid_cache.pkl")))

    @classmethod
    def tearDownClass(cls):
        # Clean up test directories
        shutil.rmtree(cls.test_data_dir)
        shutil.rmtree(cls.test_cache_dir)

if __name__ == '__main__':
    unittest.main()
